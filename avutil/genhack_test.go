package avutil

//
// THIS FILE WAS AUTOMATICALLY GENERATED by hackgenerator.go.
//

import "testing"

func TestHackOverflowErrorCodeBSFNotFound(t *testing.T) {
	cval := ErrorCode(getErrorCodeBSFNotFound())
	if cval != ErrorCodeBSFNotFound {
		t.Fatalf("ErrorCodeBSFNotFound/AVERROR_BSF_NOT_FOUND overflow check failed: expected %v but got %v", ErrorCodeBSFNotFound, cval)
	}
}

func TestHackOverflowErrorCodeBug(t *testing.T) {
	cval := ErrorCode(getErrorCodeBug())
	if cval != ErrorCodeBug {
		t.Fatalf("ErrorCodeBug/AVERROR_BUG overflow check failed: expected %v but got %v", ErrorCodeBug, cval)
	}
}

func TestHackOverflowErrorCodeBufferTooSmall(t *testing.T) {
	cval := ErrorCode(getErrorCodeBufferTooSmall())
	if cval != ErrorCodeBufferTooSmall {
		t.Fatalf("ErrorCodeBufferTooSmall/AVERROR_BUFFER_TOO_SMALL overflow check failed: expected %v but got %v", ErrorCodeBufferTooSmall, cval)
	}
}

func TestHackOverflowErrorCodeDecoderNotFound(t *testing.T) {
	cval := ErrorCode(getErrorCodeDecoderNotFound())
	if cval != ErrorCodeDecoderNotFound {
		t.Fatalf("ErrorCodeDecoderNotFound/AVERROR_DECODER_NOT_FOUND overflow check failed: expected %v but got %v", ErrorCodeDecoderNotFound, cval)
	}
}

func TestHackOverflowErrorCodeDemuxerNotFound(t *testing.T) {
	cval := ErrorCode(getErrorCodeDemuxerNotFound())
	if cval != ErrorCodeDemuxerNotFound {
		t.Fatalf("ErrorCodeDemuxerNotFound/AVERROR_DEMUXER_NOT_FOUND overflow check failed: expected %v but got %v", ErrorCodeDemuxerNotFound, cval)
	}
}

func TestHackOverflowErrorCodeEncoderNotFound(t *testing.T) {
	cval := ErrorCode(getErrorCodeEncoderNotFound())
	if cval != ErrorCodeEncoderNotFound {
		t.Fatalf("ErrorCodeEncoderNotFound/AVERROR_ENCODER_NOT_FOUND overflow check failed: expected %v but got %v", ErrorCodeEncoderNotFound, cval)
	}
}

func TestHackOverflowErrorCodeEOF(t *testing.T) {
	cval := ErrorCode(getErrorCodeEOF())
	if cval != ErrorCodeEOF {
		t.Fatalf("ErrorCodeEOF/AVERROR_EOF overflow check failed: expected %v but got %v", ErrorCodeEOF, cval)
	}
}

func TestHackOverflowErrorCodeExit(t *testing.T) {
	cval := ErrorCode(getErrorCodeExit())
	if cval != ErrorCodeExit {
		t.Fatalf("ErrorCodeExit/AVERROR_EXIT overflow check failed: expected %v but got %v", ErrorCodeExit, cval)
	}
}

func TestHackOverflowErrorCodeExternal(t *testing.T) {
	cval := ErrorCode(getErrorCodeExternal())
	if cval != ErrorCodeExternal {
		t.Fatalf("ErrorCodeExternal/AVERROR_EXTERNAL overflow check failed: expected %v but got %v", ErrorCodeExternal, cval)
	}
}

func TestHackOverflowErrorCodeFilterNotFound(t *testing.T) {
	cval := ErrorCode(getErrorCodeFilterNotFound())
	if cval != ErrorCodeFilterNotFound {
		t.Fatalf("ErrorCodeFilterNotFound/AVERROR_FILTER_NOT_FOUND overflow check failed: expected %v but got %v", ErrorCodeFilterNotFound, cval)
	}
}

func TestHackOverflowErrorCodeInvalidData(t *testing.T) {
	cval := ErrorCode(getErrorCodeInvalidData())
	if cval != ErrorCodeInvalidData {
		t.Fatalf("ErrorCodeInvalidData/AVERROR_INVALIDDATA overflow check failed: expected %v but got %v", ErrorCodeInvalidData, cval)
	}
}

func TestHackOverflowErrorCodeMuxerNotFound(t *testing.T) {
	cval := ErrorCode(getErrorCodeMuxerNotFound())
	if cval != ErrorCodeMuxerNotFound {
		t.Fatalf("ErrorCodeMuxerNotFound/AVERROR_MUXER_NOT_FOUND overflow check failed: expected %v but got %v", ErrorCodeMuxerNotFound, cval)
	}
}

func TestHackOverflowErrorCodeOptionNotFound(t *testing.T) {
	cval := ErrorCode(getErrorCodeOptionNotFound())
	if cval != ErrorCodeOptionNotFound {
		t.Fatalf("ErrorCodeOptionNotFound/AVERROR_OPTION_NOT_FOUND overflow check failed: expected %v but got %v", ErrorCodeOptionNotFound, cval)
	}
}

func TestHackOverflowErrorCodePatchWelcome(t *testing.T) {
	cval := ErrorCode(getErrorCodePatchWelcome())
	if cval != ErrorCodePatchWelcome {
		t.Fatalf("ErrorCodePatchWelcome/AVERROR_PATCHWELCOME overflow check failed: expected %v but got %v", ErrorCodePatchWelcome, cval)
	}
}

func TestHackOverflowErrorCodeProtocolNotFound(t *testing.T) {
	cval := ErrorCode(getErrorCodeProtocolNotFound())
	if cval != ErrorCodeProtocolNotFound {
		t.Fatalf("ErrorCodeProtocolNotFound/AVERROR_PROTOCOL_NOT_FOUND overflow check failed: expected %v but got %v", ErrorCodeProtocolNotFound, cval)
	}
}

func TestHackOverflowErrorCodeStreamNotFound(t *testing.T) {
	cval := ErrorCode(getErrorCodeStreamNotFound())
	if cval != ErrorCodeStreamNotFound {
		t.Fatalf("ErrorCodeStreamNotFound/AVERROR_STREAM_NOT_FOUND overflow check failed: expected %v but got %v", ErrorCodeStreamNotFound, cval)
	}
}

func TestHackOverflowErrorCodeBug2(t *testing.T) {
	cval := ErrorCode(getErrorCodeBug2())
	if cval != ErrorCodeBug2 {
		t.Fatalf("ErrorCodeBug2/AVERROR_BUG2 overflow check failed: expected %v but got %v", ErrorCodeBug2, cval)
	}
}

func TestHackOverflowErrorCodeUnknown(t *testing.T) {
	cval := ErrorCode(getErrorCodeUnknown())
	if cval != ErrorCodeUnknown {
		t.Fatalf("ErrorCodeUnknown/AVERROR_UNKNOWN overflow check failed: expected %v but got %v", ErrorCodeUnknown, cval)
	}
}

func TestHackOverflowErrorCodeExperimental(t *testing.T) {
	cval := ErrorCode(getErrorCodeExperimental())
	if cval != ErrorCodeExperimental {
		t.Fatalf("ErrorCodeExperimental/AVERROR_EXPERIMENTAL overflow check failed: expected %v but got %v", ErrorCodeExperimental, cval)
	}
}

func TestHackOverflowErrorCodeInputChanged(t *testing.T) {
	cval := ErrorCode(getErrorCodeInputChanged())
	if cval != ErrorCodeInputChanged {
		t.Fatalf("ErrorCodeInputChanged/AVERROR_INPUT_CHANGED overflow check failed: expected %v but got %v", ErrorCodeInputChanged, cval)
	}
}

func TestHackOverflowErrorCodeOutputChanged(t *testing.T) {
	cval := ErrorCode(getErrorCodeOutputChanged())
	if cval != ErrorCodeOutputChanged {
		t.Fatalf("ErrorCodeOutputChanged/AVERROR_OUTPUT_CHANGED overflow check failed: expected %v but got %v", ErrorCodeOutputChanged, cval)
	}
}

func TestHackOverflowErrorCodeHttpBadRequest(t *testing.T) {
	cval := ErrorCode(getErrorCodeHttpBadRequest())
	if cval != ErrorCodeHttpBadRequest {
		t.Fatalf("ErrorCodeHttpBadRequest/AVERROR_HTTP_BAD_REQUEST overflow check failed: expected %v but got %v", ErrorCodeHttpBadRequest, cval)
	}
}

func TestHackOverflowErrorCodeHttpUnauthorized(t *testing.T) {
	cval := ErrorCode(getErrorCodeHttpUnauthorized())
	if cval != ErrorCodeHttpUnauthorized {
		t.Fatalf("ErrorCodeHttpUnauthorized/AVERROR_HTTP_UNAUTHORIZED overflow check failed: expected %v but got %v", ErrorCodeHttpUnauthorized, cval)
	}
}

func TestHackOverflowErrorCodeHttpForbidden(t *testing.T) {
	cval := ErrorCode(getErrorCodeHttpForbidden())
	if cval != ErrorCodeHttpForbidden {
		t.Fatalf("ErrorCodeHttpForbidden/AVERROR_HTTP_FORBIDDEN overflow check failed: expected %v but got %v", ErrorCodeHttpForbidden, cval)
	}
}

func TestHackOverflowErrorCodeHttpNotFound(t *testing.T) {
	cval := ErrorCode(getErrorCodeHttpNotFound())
	if cval != ErrorCodeHttpNotFound {
		t.Fatalf("ErrorCodeHttpNotFound/AVERROR_HTTP_NOT_FOUND overflow check failed: expected %v but got %v", ErrorCodeHttpNotFound, cval)
	}
}

func TestHackOverflowErrorCodeHttpOther4xx(t *testing.T) {
	cval := ErrorCode(getErrorCodeHttpOther4xx())
	if cval != ErrorCodeHttpOther4xx {
		t.Fatalf("ErrorCodeHttpOther4xx/AVERROR_HTTP_OTHER_4XX overflow check failed: expected %v but got %v", ErrorCodeHttpOther4xx, cval)
	}
}

func TestHackOverflowErrorCodeHttpServerError(t *testing.T) {
	cval := ErrorCode(getErrorCodeHttpServerError())
	if cval != ErrorCodeHttpServerError {
		t.Fatalf("ErrorCodeHttpServerError/AVERROR_HTTP_SERVER_ERROR overflow check failed: expected %v but got %v", ErrorCodeHttpServerError, cval)
	}
}

func TestHackOverflowNoPTSValue(t *testing.T) {
	cval := int64(getNoPTSValue())
	if cval != NoPTSValue {
		t.Fatalf("NoPTSValue/AV_NOPTS_VALUE overflow check failed: expected %v but got %v", NoPTSValue, cval)
	}
}
